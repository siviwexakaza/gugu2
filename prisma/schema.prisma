generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String
  imei      String
  createdAt DateTime @default(now())
  roleId    String
  statusId  String

  role                    Role                     @relation(fields: [roleId], references: [id])
  status                  Status                   @relation(fields: [statusId], references: [id])
  accounts                Account[]
  userOnWifiSubscriptions UserOnWifiSubscription[]
  billings                Billing[]
  orders                  Order[]

  @@index([roleId])
  @@index([statusId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model WifiSubscription {
  id                      String                   @id @default(uuid())
  packageCode             String
  title                   String
  description             String
  monthlyPrice            Float
  annualPrice             Float
  monthlyDiscount         Float
  annualDiscount          Float
  userOnWifiSubscriptions UserOnWifiSubscription[]
}

model UserOnWifiSubscription {
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  subscription   WifiSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt      DateTime         @default(now())
  statusId       String
  status         Status           @relation(fields: [statusId], references: [id])

  @@id([userId, subscriptionId])
  @@index([userId])
  @@index([subscriptionId])
  @@index([statusId])
}

model Billing {
  id            String   @id @default(uuid())
  item          String
  amount        Float
  userId        String
  statusId      String
  createdAt     DateTime @default(now())
  paymentMethod String
  status        Status   @relation(fields: [statusId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([statusId])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  statusId String
  status   Status    @relation(fields: [statusId], references: [id])
  products Product[]

  @@index([statusId])
}

model Order {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  statusId String
  status   Status    @relation(fields: [statusId], references: [id])
  address  String
  products Product[]

  @@index([statusId])
  @@index([userId])
}

model Product {
  id          String @id @default(uuid())
  categoryId  String
  statusId    String
  description String
  title       String
  photo       String
  price       Float
  discount    Float
  flavor      String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status   Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  orders   Order?   @relation(fields: [orderId], references: [id])
  orderId  String?

  @@index([categoryId])
  @@index([statusId])
}

model Role {
  id        String   @id @default(uuid())
  name      String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Status {
  id                      String                   @id @default(uuid())
  name                    String
  users                   User[]
  userOnWifiSubscriptions UserOnWifiSubscription[]
  categories              Category[]
  billings                Billing[]
  products                Product[]
  orders                  Order[]
}

model LegalTerms {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
